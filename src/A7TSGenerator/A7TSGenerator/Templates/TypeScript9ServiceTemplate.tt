<#@ template language="C#" #>
<#@ template debug="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/// <reference path="../framework/a7/collections/icollection.ts" />
/// <reference path="../framework/a7/collections/collection.ts" />
/// <reference path="../framework/a7/decorators/injectable.ts" />
/// <reference path="../framework/a7/services/service.ts" />
<#=ModelReferences#>

module Services {
 
	@a7.injectable()
    export class <#=Service.Name#>Service extends A7.Services.Service implements Interfaces.I<#=Service.Name#>Service {

        constructor() {
            super();

			this._url = '<#=Service.Url#>';
        }

	   <#Service.ServiceMethods.ToList().ForEach(serviceMethod => {#>

        <#=serviceMethod.Name#>(<#=serviceMethod.Arguments#>): <#=serviceMethod.ReturnType#>{
            <#=serviceMethod.Body#>
        }

		<#});#>

    }

}

module Services.Interfaces {

	export interface I<#=Service.Name#>Service {
	<#Service.ServiceMethods.ToList().ForEach(serviceMethod => {#>
	<#=serviceMethod.Name#>: (<#=serviceMethod.ArgumentsWithoutDefaultParams#>) => <#=serviceMethod.ReturnType#>;
	<#});#>	
		OnCreate: <T>(fnHandler: (event: JQueryEventObject, model: T) => void ) => void;
		OnUpdate: <T>(fnHandler: (event: JQueryEventObject, model: T) => void ) => void;         
		OnDelete: <T>(fnHandler: (event: JQueryEventObject, model: T) => void ) => void;
		OnModified: <T>(fnHandler: (event: JQueryEventObject, model: T, eventType: string) => void) => void;
	}

}