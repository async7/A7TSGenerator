<#@ template language="C#" #>
<#@ template debug="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/// <reference path="../common/A7.Service.ts" />
<#=ModelReferences#>

module Services {

    export class <#=Service.Name#>Service extends A7.Service implements Interfaces.I<#=Service.Name#>Service {

        constructor(url = '<#=Service.Url#>') {
            super(url);
        }

	   <#Service.ServiceMethods.ToList().ForEach(serviceMethod => {#>

        <#=serviceMethod.Name#>(<#=serviceMethod.Arguments#>): <#=serviceMethod.ReturnType#>{
            <#=serviceMethod.Body#>
        }

		<#});#>

    }

}

module Services.Interfaces {

	export interface I<#=Service.Name#>Service {
	<#Service.ServiceMethods.ToList().ForEach(serviceMethod => {#>
        <#=serviceMethod.Name#>(<#=serviceMethod.ArgumentsWithoutDefaultParams#>): <#=serviceMethod.ReturnType#>;

		<#});#>	

		OnCreate<T>(fnHandler: (event: JQueryEventObject, model: T) => void );

		OnUpdate<T>(fnHandler: (event: JQueryEventObject, model: T) => void );         
        
		OnDelete<T>(fnHandler: (event: JQueryEventObject, model: T) => void );

		OnModified<T>(fnHandler: (event: JQueryEventObject, model: T, eventType: string) => void);

		}

}